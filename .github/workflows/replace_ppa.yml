name: "(P) Replace PPA Package"

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to fetch (.e.g. v11.0.0). Leave blank for the latest release"
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: Deploy-to-ppa
    steps:
      - name: Install publishing tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev ftp gnupg apt-utils

      - name: Determine source release
        id: release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          TAG="${{ inputs.release_tag }}"
          if [ -z "$TAG" ]; then
            TAG=$(gh release view --json tagName -q .tagName)
          else
            gh release view "$TAG" >/dev/null
          fi

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Download release DEB assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          TAG="${{ steps.release.outputs.tag }}"
          mkdir -p "$HOME/ppa/artifacts"
          gh release download "$TAG" --pattern "*.deb" --dir "$HOME/ppa/artifacts"

          if [ -z "$(find "$HOME/ppa/artifacts" -maxdepth 1 -name '*.deb' -print -quit)" ]; then
            echo "No .deb assets were downloaded from release $TAG" >&2
            ls -la "$HOME/ppa/artifacts" || true
            exit 1
          fi

      - name: Publish DEB to PPA
        env:
          KEYMASK: ${{ secrets.KEYMASK }}
          GPG_SEC: ${{ secrets.GPG_SEC }}
          GPG_SSB: ${{ secrets.GPG_SSB }}
          FTP_INIT_SCRIPT: ${{ secrets.FTP_INIT_SCRIPT }}
          FTP_FINISH_SCRIPT: ${{ secrets.FTP_FINISH_SCRIPT }}
        run: |
          set -euo pipefail
          echo "::add-mask::$KEYMASK"

          WORKDIR="$HOME/ppa"
          ARTIFACT_DIR="$WORKDIR/artifacts"

          DEB_FILE=$(find "$ARTIFACT_DIR" -maxdepth 1 -name "*.deb" | head -n 1)
          if [ -z "$DEB_FILE" ]; then
            echo "No .deb file found to publish" >&2
            ls -la "$ARTIFACT_DIR" || true
            exit 1
          fi

          mkdir -p "$WORKDIR/publish"
          cp "$DEB_FILE" "$WORKDIR/publish/"
          cp "$ARTIFACT_DIR"/*.sha256 "$WORKDIR/publish/" 2>/dev/null || true

          echo "$GPG_SEC" > "$WORKDIR/Floorp_sec.asc"
          gpg --batch --import "$WORKDIR/Floorp_sec.asc"
          echo "$FTP_INIT_SCRIPT" > "$WORKDIR/init_script.txt"
          echo "$FTP_FINISH_SCRIPT" > "$WORKDIR/finish_script.txt"

          cd "$WORKDIR/publish"
          ftp -n -p < ../init_script.txt

          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --default-key "$GPG_SSB" -abs -o - Release > Release.gpg
          gpg --default-key "$GPG_SSB" --clearsign -o - Release > InRelease

          ftp -n -p < ../finish_script.txt

          cd "$WORKDIR"
          rm -f init_script.txt finish_script.txt Floorp_sec.asc
