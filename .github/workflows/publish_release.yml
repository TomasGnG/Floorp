# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

name: "(P) |Î±| Publish Release"

on:
  workflow_call:
    inputs:
      publish_ppa:
        type: boolean
        required: false
        default: false

permissions:
  contents: write

run-name: "|Î±| Publish Release"
jobs:
  main:
    runs-on: ubuntu-latest
    environment: Deploy-to-installer-release
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      NR_VERSION: ${{ steps.setup.outputs.NR_VERSION }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: init zx
        run: |
          deno install -g -A npm:zx

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: floorp-windows-x86_64-mar-full
          path: ~/noraneko-publish/win
          github-token: ${{ github.token }}

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: floorp-linux-x86_64-mar-full
          path: ~/noraneko-publish/linux
          github-token: ${{ github.token }}

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: floorp-mac-universal-mar-full
          path: ~/noraneko-publish/mac
          github-token: ${{ github.token }}

      - name: Download Windows installer
        uses: actions/download-artifact@v4
        with:
          name: noraneko-windows-x86_64-installer
          path: ~/noraneko-publish/win-dist
          github-token: ${{ github.token }}

      - name: Download Linux installer
        uses: actions/download-artifact@v4
        with:
          name: noraneko-linux-x86_64-installer
          path: ~/noraneko-publish/linux-dist
          github-token: ${{ github.token }}

      - name: Download Linux PPA DEB
        uses: actions/download-artifact@v4
        with:
          name: floorp-Linux-x64-deb
          path: ~/noraneko-publish/linux-deb
          github-token: ${{ github.token }}

      - name: Download macOS installer
        uses: actions/download-artifact@v4
        with:
          name: noraneko-mac-universal-installer
          path: ~/noraneko-publish/mac-dist
          github-token: ${{ github.token }}

      - name: Download Linux aarch64 artifact
        uses: actions/download-artifact@v4
        with:
          name: floorp-linux-aarch64-mar-full
          path: ~/noraneko-publish/linux-aarch64
          github-token: ${{ github.token }}

      - name: Download Linux aarch64 installer
        uses: actions/download-artifact@v4
        with:
          name: noraneko-linux-aarch64-installer
          path: ~/noraneko-publish/linux-aarch64-dist
          github-token: ${{ github.token }}

      # PPA-related setup and artifact download were moved to a
      # reusable workflow (`.github/workflows/publish_ppa.yml`) which is
      # called after the updater dispatch. See the `publish_ppa` job.

      - name: Download Stub Installers from latest release
        run: |
          set -eux
          mkdir -p ~/noraneko-publish/stub-installers

          # Download the known stub installer directly. No token required.
          URL="https://github.com/Floorp-Projects/Floorp/releases/latest/download/floorp-stub.installer.exe"
          OUT="$HOME/noraneko-publish/stub-installers/$(basename "$URL")"

          echo "Downloading stub installer from $URL to $OUT"
          curl -L --fail -o "$OUT" "$URL"

          echo "Downloaded contents of ~/noraneko-publish/stub-installers:"
          ls -la ~/noraneko-publish/stub-installers || true

      - name: Setup
        id: setup
        run: |
          deno install --allow-scripts
          sudo apt install jq

          VERSION=$(cat ~/noraneko-publish/win/meta.json | jq '.version' | sed 's/"//g')
          NR_VERSION=$(cat ~/noraneko-publish/win/meta.json | jq '.noraneko_version' | sed 's/"//g')

          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "NR_VERSION=${NR_VERSION}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "NR_VERSION=${NR_VERSION}" >> "$GITHUB_OUTPUT"

          echo "BUILDID=$(cat ~/noraneko-publish/mac/meta.json | jq '.buildid' | sed 's/"//g')" >> "$GITHUB_ENV"
          echo "BUILDID2=$(cat ~/noraneko-publish/mac/meta.json | jq '.noraneko_buildid' | sed 's/"//g')" >> "$GITHUB_ENV"
          echo "ROOT_DIR=$(echo ~)" >> "$GITHUB_ENV"

      - name: Check Files
        run: |
          echo "Windows Files:"
          ls -la ~/noraneko-publish/win
          echo "Linux Files:"
          ls -la ~/noraneko-publish/linux
          echo "Linux DEB Files:"
          ls -la ~/noraneko-publish/linux-deb
          echo "Linux aarch64 Files:"
          ls -la ~/noraneko-publish/linux-aarch64
          echo "macOS Files:"
          ls -la ~/noraneko-publish/mac
          echo "Windows Installer Files:"
          ls -la ~/noraneko-publish/win-dist
          echo "Linux Installer Files:"
          ls -la ~/noraneko-publish/linux-dist
          echo "Linux aarch64 Installer Files:"
          ls -la ~/noraneko-publish/linux-aarch64-dist
          echo "macOS Installer Files:"
          ls -la ~/noraneko-publish/mac-dist

      - name: Prepare meta.json files with platform-specific names
        run: |
          cp ~/noraneko-publish/win/meta.json ~/noraneko-publish/win-meta.json
          cp ~/noraneko-publish/linux/meta.json ~/noraneko-publish/linux-meta.json
          cp ~/noraneko-publish/linux-aarch64/meta.json ~/noraneko-publish/linux-aarch64-meta.json
          cp ~/noraneko-publish/mac/meta.json ~/noraneko-publish/mac-meta.json

      - name: Generate hashes.txt
        run: |
          cd ~/noraneko-publish
          echo "# Floorp ${{ env.NR_VERSION }} - File Hashes" > hashes.txt
          echo "Generated on: $(date -u)" >> hashes.txt
          echo "" >> hashes.txt

          echo "## Windows Files" >> hashes.txt
          find win -name "*.mar" -o -name "*.exe" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          find win-dist -name "*.exe" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          echo "" >> hashes.txt

          echo "## Linux Files" >> hashes.txt
          find linux -name "*.mar" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          find linux-dist -type f | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          echo "" >> hashes.txt

          echo "## Linux aarch64 Files" >> hashes.txt
          find linux-aarch64 -name "*.mar" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          find linux-aarch64-dist -type f | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          echo "" >> hashes.txt

          echo "## macOS Files" >> hashes.txt
          find mac -name "*.mar" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          find mac-dist -name "*.dmg" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done
          echo "" >> hashes.txt

          echo "## Stub Installers" >> hashes.txt
          find stub-installers -name "*.exe" | while read file; do
            echo "SHA256: $(sha256sum "$file" | cut -d' ' -f1) - $file" >> hashes.txt
          done

      # NOTE: The PPA publishing step was moved out of the `main` job and
      # implemented as a separate job `publish_ppa` that runs after the
      # updater dispatch. See the `publish_ppa` job defined below.
      - name: Deploy to GitHub Releases ðŸš€
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ROOT_DIR }}/noraneko-publish/win/*.mar
            ${{ env.ROOT_DIR }}/noraneko-publish/win-dist/*.exe
            ${{ env.ROOT_DIR }}/noraneko-publish/win-meta.json
            ${{ env.ROOT_DIR }}/noraneko-publish/linux/*.mar
            ${{ env.ROOT_DIR }}/noraneko-publish/linux-dist/**
            ${{ env.ROOT_DIR }}/noraneko-publish/linux-deb/*.deb
            ${{ env.ROOT_DIR }}/noraneko-publish/linux-meta.json
            ${{ env.ROOT_DIR }}/noraneko-publish/linux-aarch64/*.mar
            ${{ env.ROOT_DIR }}/noraneko-publish/linux-aarch64-dist/**
            ${{ env.ROOT_DIR }}/noraneko-publish/linux-aarch64-meta.json
            ${{ env.ROOT_DIR }}/noraneko-publish/mac/*.mar
            ${{ env.ROOT_DIR }}/noraneko-publish/mac-dist/*.dmg
            ${{ env.ROOT_DIR }}/noraneko-publish/mac-meta.json
            ${{ env.ROOT_DIR }}/noraneko-publish/stub-installers/**
            ${{ env.ROOT_DIR }}/noraneko-publish/hashes.txt
          tag_name: "v${{ env.NR_VERSION }}"
          name: "Floorp ${{ env.NR_VERSION }}"
          body: |
            Release Note: https://blog.floorp.app/release/${{ env.NR_VERSION }}

            ## What's Changed

            ${{ steps.release_notes.outputs.body }}
          generate_release_notes: true
          draft: false
          make_latest: true
          token: ${{ github.token }}

  publish:
    needs: [main]
    runs-on: ubuntu-latest
    environment:
      name: Deploy-to-updater-release
    outputs:
      NR_VERSION: ${{ needs.main.outputs.NR_VERSION }}
      VERSION: ${{ needs.main.outputs.VERSION }}
    steps:
      - name: Deploy to Floorp Update Server ðŸš€
        env:
          NR_VERSION: ${{ needs.main.outputs.NR_VERSION }}
          VERSION: ${{ needs.main.outputs.VERSION }}
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.UPDATE_SERVER_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/Floorp-Projects/Floorp-Updates/actions/workflows/update-stable-updatexml-files.yml/dispatches" \
          -d '{ 
            "ref": "main",
            "inputs": {
              "win-mar-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/floorp-windows-x86_64-full.mar",
              "linux-mar-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/floorp-linux-x86_64-full.mar",
              "linux-aarch64-mar-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/floorp-linux-aarch64-full.mar",
              "mac-mar-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/floorp-mac-universal-full.mar",
              "win-meta-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/win-meta.json",
              "linux-meta-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/linux-meta.json",
              "linux-aarch64-meta-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/linux-aarch64-meta.json",
              "mac-meta-url": "https://github.com/Floorp-Projects/Floorp/releases/download/v${{ env.NR_VERSION }}/mac-meta.json",
              "firefox-version": "${{ env.VERSION }}",
              "app-version2": "${{ env.NR_VERSION }}"
            }
          }'

  publish_ppa:
    needs: [publish]
    if: ${{ inputs.publish_ppa }}
    uses: ./.github/workflows/publish_ppa.yml
    with:
      nr_version: ${{ needs.publish.outputs.NR_VERSION }}
    secrets:
      KEYMASK: ${{ secrets.KEYMASK }}
      GPG_SEC: ${{ secrets.GPG_SEC }}
      GPG_SSB: ${{ secrets.GPG_SSB }}
      FTP_INIT_SCRIPT: ${{ secrets.FTP_INIT_SCRIPT }}
      FTP_FINISH_SCRIPT: ${{ secrets.FTP_FINISH_SCRIPT }}
