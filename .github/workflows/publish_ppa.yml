name: "(P) Publish Linux DEB to PPA (reusable)"

on:
  workflow_call:
    inputs:
      nr_version:
        type: string
        required: false
    secrets:
      KEYMASK:
        required: true
      GPG_SEC:
        required: true
      GPG_SSB:
        required: true
      FTP_INIT_SCRIPT:
        required: true
      FTP_FINISH_SCRIPT:
        required: true

jobs:
  publish_deb:
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux DEB artifact (PPA)
        uses: actions/download-artifact@v4
        with:
          name: floorp-Linux-x64-deb
          path: ~/noraneko-publish/linux-deb

      - name: Validate legacy DEB filename
        # Ensure we only accept the historical floorp-<version_display>.deb naming.
        run: |
          set -eux
          NR_VERSION="${{ inputs.nr_version }}"
          cd ~/noraneko-publish/linux-deb

          # If an uploaded zip exists (dist.zip or similar), unzip it to extract the .deb
          if ls *.zip >/dev/null 2>&1; then
            unzip -o *.zip || true
          fi

          mapfile -t LEGACY_DEBS < <(find . -maxdepth 1 -type f -name "floorp-*.deb" | sort)
          if [ "${#LEGACY_DEBS[@]}" -eq 0 ]; then
            echo "Expected legacy-named floorp-<version_display>.deb in ~/noraneko-publish/linux-deb" >&2
            ls -la . || true
            exit 1
          fi
          if [ "${#LEGACY_DEBS[@]}" -gt 1 ]; then
            echo "Multiple legacy floorp-*.deb files detected; refusing to continue" >&2
            printf '%s\n' "${LEGACY_DEBS[@]}"
            exit 1
          fi

          DEB_FILE="${LEGACY_DEBS[0]}"
          echo "Found legacy DEB: $DEB_FILE"

          if [ -n "$NR_VERSION" ]; then
            EXPECTED="./floorp-${NR_VERSION}.deb"
            if [ "$DEB_FILE" != "$EXPECTED" ]; then
              echo "inputs.nr_version=$NR_VERSION but legacy artifact is $(basename "$DEB_FILE"); mismatch detected" >&2
              exit 1
            fi
          fi

      - name: Install PPA tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev ftp gnupg apt-utils

      - name: Publish Linux DEB to PPA
        env:
          KEYMASK: ${{ secrets.KEYMASK }}
          GPG_SEC: ${{ secrets.GPG_SEC }}
          GPG_SSB: ${{ secrets.GPG_SSB }}
          FTP_INIT_SCRIPT: ${{ secrets.FTP_INIT_SCRIPT }}
          FTP_FINISH_SCRIPT: ${{ secrets.FTP_FINISH_SCRIPT }}
        run: |
          set -euo pipefail
          echo "::add-mask::$KEYMASK"

          WORKDIR="$HOME/ppa"
          ARTIFACT_DIR="$HOME/noraneko-publish/linux-deb"

          if [ ! -d "$ARTIFACT_DIR" ]; then
            echo "Artifact directory $ARTIFACT_DIR missing" >&2
            exit 1
          fi

          DEB_FILE=$(find "$ARTIFACT_DIR" -maxdepth 1 -name "*.deb" | head -n 1)
          if [ -z "$DEB_FILE" ]; then
            echo "No .deb file found for PPA publishing" >&2
            ls -la "$ARTIFACT_DIR" || true
            exit 1
          fi

          mkdir -p "$WORKDIR/publish"
          cp "$DEB_FILE" "$WORKDIR/publish/"
          cp "$ARTIFACT_DIR"/*.sha256 "$WORKDIR/publish/" 2>/dev/null || true

          echo "$GPG_SEC" > "$WORKDIR/Floorp_sec.asc"
          gpg --batch --import "$WORKDIR/Floorp_sec.asc"
          echo "$FTP_INIT_SCRIPT" > "$WORKDIR/init_script.txt"
          echo "$FTP_FINISH_SCRIPT" > "$WORKDIR/finish_script.txt"

          cd "$WORKDIR/publish"
          ftp -n -p < ../init_script.txt

          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --default-key "$GPG_SSB" -abs -o - Release > Release.gpg
          gpg --default-key "$GPG_SSB" --clearsign -o - Release > InRelease

          ftp -n -p < ../finish_script.txt

          cd "$WORKDIR"
          rm -f init_script.txt finish_script.txt Floorp_sec.asc
